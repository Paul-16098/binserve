name: CICD

# spell-checker:ignore (acronyms) CICD MSRV MSVC musl
# spell-checker:ignore (env/flags) Awarnings Ccodegen Coverflow Cpanic RUSTDOCFLAGS RUSTFLAGS Zpanic
# spell-checker:ignore (jargon) SHAs deps softprops toolchain
# spell-checker:ignore (names) CodeCOV MacOS MinGW mufeedvh rivy
# spell-checker:ignore (shell/tools) choco clippy dmake dpkg esac fakeroot gmake grcov halium lcov libssl mkdir popd printf pushd rustc rustfmt rustup shopt xargs
# spell-checker:ignore (misc) aarch alnum armhf binserve blazingly coreutils gnueabihf issuecomment maint nullglob onexitbegin onexitend tempfile uutils

env:
  PROJECT_NAME: binserve
  PROJECT_DESC: "A fast static web server with TLS (HTTPS), Routing, Hot Reloading, Caching, Templating, and Security in a single-binary you can set up with zero code."
  PROJECT_AUTH: "mufeedvh"
  RUST_COV_SRV: "2020-08-01" ## (~v1.47.0) supported rust version for code coverage; (date required/used by 'coverage')

on: [push, pull_request]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # { os, target, cargo-options, features, use-cross, toolchain }
          - {
              os: ubuntu-latest,
              target: arm-unknown-linux-gnueabihf,
              use-cross: use-cross,
            }
          - {
              os: ubuntu-latest,
              target: aarch64-unknown-linux-gnu,
              use-cross: use-cross,
            }
          - {
              os: ubuntu-latest,
              target: i686-unknown-linux-gnu,
              use-cross: use-cross,
            }
          - {
              os: ubuntu-latest,
              target: i686-unknown-linux-musl,
              use-cross: use-cross,
            }
          - {
              os: ubuntu-latest,
              target: x86_64-unknown-linux-gnu,
              use-cross: use-cross,
            }
          - {
              os: ubuntu-latest,
              target: x86_64-unknown-linux-musl,
              use-cross: use-cross,
            }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: windows-latest, target: x86_64-pc-windows-gnu } ## note: requires rust >= 1.43.0 to link correctly
          - { os: windows-latest, target: x86_64-pc-windows-msvc }
    steps:
      - uses: actions/checkout@v4
      - name: Install/setup prerequisites
        shell: bash
        run: |
          ## install/setup prerequisites
          case '${{ matrix.job.target }}' in
            arm-unknown-linux-gnueabihf) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac
          ## * remove '.cargo/config' (interferes with native platform compilation on MacOS and Windows platforms)
          if [ -e '.cargo/config' ]; then rm -f '.cargo/config' ; fi
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          outputs() { for var in "$@" ; do echo steps.vars.outputs.${var}="${!var}"; echo ::set-output name=${var}::${!var}; done; }
          ## VARs setup
          # toolchain
          TOOLCHAIN="stable" ## default to "stable" toolchain
          # * specify alternate/non-default TOOLCHAIN for *-pc-windows-gnu targets; gnu targets on Windows are broken for the standard *-pc-windows-msvc toolchain (refs: GH:rust-lang/rust#47048, GH:rust-lang/rust#53454, GH:rust-lang/cargo#6754)
          case ${{ matrix.job.target }} in *-pc-windows-gnu) TOOLCHAIN="stable-${{ matrix.job.target }}" ;; esac;
          # * use requested TOOLCHAIN if specified
          if [ -n "${{ matrix.job.toolchain }}" ]; then TOOLCHAIN="${{ matrix.job.toolchain }}" ; fi
          outputs TOOLCHAIN
          # staging directory
          STAGING='_staging'
          outputs STAGING
          # determine EXE suffix
          EXE_suffix="" ; case '${{ matrix.job.target }}' in *-pc-windows-*) EXE_suffix=".exe" ;; esac;
          outputs EXE_suffix
          # parse commit reference info
          echo GITHUB_REF=${GITHUB_REF}
          echo GITHUB_SHA=${GITHUB_SHA}
          REF_NAME=${GITHUB_REF#refs/*/}
          unset REF_BRANCH ; case "${GITHUB_REF}" in refs/heads/*) REF_BRANCH=${GITHUB_REF#refs/heads/} ;; esac;
          unset REF_TAG ; case "${GITHUB_REF}" in refs/tags/*) REF_TAG=${GITHUB_REF#refs/tags/} ;; esac;
          REF_SHAS=${GITHUB_SHA:0:8}
          outputs REF_NAME REF_BRANCH REF_TAG REF_SHAS
          # parse target info
          unset TARGET_ARCH
          case '${{ matrix.job.target }}' in
            aarch64-*) TARGET_ARCH=arm64 ;;
            arm-*-*hf) TARGET_ARCH=armhf ;;
            i586-*) TARGET_ARCH=i586 ;;
            i686-*) TARGET_ARCH=i686 ;;
            x86_64-*) TARGET_ARCH=x86_64 ;;
          esac;
          unset TARGET_OS ; case '${{ matrix.job.target }}' in *-linux-*) TARGET_OS=linux ;; *-apple-*) TARGET_OS=macos ;; *-windows-*) TARGET_OS=windows ;; esac;
          outputs TARGET_ARCH TARGET_OS
          # package name
          PKG_suffix=".tar.gz" ; case '${{ matrix.job.target }}' in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
          PKG_BASENAME=${PROJECT_NAME}-${REF_TAG:-$REF_SHAS}-${{ matrix.job.target }}
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          outputs PKG_suffix PKG_BASENAME PKG_NAME
          # deployable tag? (ie, leading "vM" or "M"; M == version number)
          unset DEPLOY ; if [[ $REF_TAG =~ ^[vV]?[0-9].* ]]; then DEPLOY='true' ; fi
          outputs DEPLOY
          # DPKG architecture?
          unset DPKG_ARCH
          case ${{ matrix.job.target }} in
            x86_64-*-linux-*) DPKG_ARCH=amd64 ;;
            *-linux-*) DPKG_ARCH=${TARGET_ARCH} ;;
          esac
          outputs DPKG_ARCH
          # DPKG version?
          unset DPKG_VERSION ; if [[ $REF_TAG =~ ^[vV]?[0-9].* ]]; then DPKG_VERSION=${REF_TAG/#[vV]/} ; fi
          outputs DPKG_VERSION
          # DPKG base name/conflicts?
          DPKG_BASENAME=${PROJECT_NAME}
          DPKG_CONFLICTS=${PROJECT_NAME}-musl
          case ${{ matrix.job.target }} in *-musl) DPKG_BASENAME=${PROJECT_NAME}-musl ; DPKG_CONFLICTS=${PROJECT_NAME} ;; esac;
          outputs DPKG_BASENAME DPKG_CONFLICTS
          # DPKG name
          unset DPKG_NAME
          if [[ -n $DPKG_ARCH && -n $DPKG_VERSION ]]; then DPKG_NAME="${DPKG_BASENAME}_${DPKG_VERSION}_${DPKG_ARCH}.deb" ; fi
          outputs DPKG_NAME
          # target-specific options
          # * CARGO_FEATURES_OPTION
          CARGO_FEATURES_OPTION=''
          if [ -n "${{ matrix.job.features }}" ]; then CARGO_FEATURES_OPTION='--features "${{ matrix.job.features }}"' ; fi
          outputs CARGO_FEATURES_OPTION
          # * CARGO_USE_CROSS (truthy)
          CARGO_USE_CROSS='true' ; case '${{ matrix.job.use-cross }}' in ''|0|f|false|n|no) unset CARGO_USE_CROSS ;; esac;
          outputs CARGO_USE_CROSS
          # ** pass needed environment into `cross` container (iff `cross` not already configured via "Cross.toml")
          if [ -n "${CARGO_USE_CROSS}" ] && [ ! -e "Cross.toml" ] ; then
            printf "[build.env]\npassthrough = [\"CI\"]\n" > Cross.toml
          fi
          # * test only library and/or binaries for arm-type targets
          unset CARGO_TEST_OPTIONS ; case '${{ matrix.job.target }}' in aarch64-* | arm-*) CARGO_TEST_OPTIONS="--bins" ;; esac;
          outputs CARGO_TEST_OPTIONS
          # * executable for `strip`?
          STRIP="strip"
          case ${{ matrix.job.target }} in
            aarch64-*-linux-gnu) STRIP="aarch64-linux-gnu-strip" ;;
            arm-*-linux-gnueabihf) STRIP="arm-linux-gnueabihf-strip" ;;
            *-pc-windows-msvc) STRIP="" ;;
          esac
          outputs STRIP
      - name: Create all needed build/work directories
        shell: bash
        run: |
          ## create build/work space
          mkdir -p '${{ steps.vars.outputs.STAGING }}'
          mkdir -p '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}'
          mkdir -p '${{ steps.vars.outputs.STAGING }}/dpkg'

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.job.target }}
          args: "--release ${{ matrix.job.cargo-options }} ${{ steps.vars.outputs.CARGO_FEATURES_OPTION }}"
          strip: true
      - name: Test
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: test
          target: ${{ matrix.job.target }}
          args: "--release ${{ steps.vars.outputs.CARGO_TEST_OPTIONS}} ${{ matrix.job.cargo-options }} ${{ steps.vars.outputs.CARGO_FEATURES_OPTION }}"
          strip: true

      - name: Archive executable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.job.target }}
          path: target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}
      - name: Package
        shell: bash
        run: |
          ## package artifact(s)
          # binary
          cp 'target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/'
          # `strip` binary (if needed)
          if [ -n "${{ steps.vars.outputs.STRIP }}" ]; then "${{ steps.vars.outputs.STRIP }}" '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' ; fi
          # README and LICENSE
          # * spell-checker:ignore EADME ICENSE
          (shopt -s nullglob; for f in [R]"EADME"{,.*}; do cp $f '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/' ; done)
          (shopt -s nullglob; for f in [L]"ICENSE"{-*,}{,.*}; do cp $f '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_BASENAME }}/' ; done)
          # core compressed package
          pushd '${{ steps.vars.outputs.STAGING }}/' >/dev/null
          case '${{ matrix.job.target }}' in
            *-pc-windows-*) 7z -y a '${{ steps.vars.outputs.PKG_NAME }}' '${{ steps.vars.outputs.PKG_BASENAME }}'/* | tail -2 ;;
            *) tar czf '${{ steps.vars.outputs.PKG_NAME }}' '${{ steps.vars.outputs.PKG_BASENAME }}'/* ;;
          esac
          popd >/dev/null
          # dpkg
          if [ -n "${{ steps.vars.outputs.DPKG_NAME }}" ]; then
            DPKG_DIR="${{ steps.vars.outputs.STAGING }}/dpkg"
            # binary
            install -Dm755 'target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' "${DPKG_DIR}/usr/bin/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}"
            if [ -n "${{ steps.vars.outputs.STRIP }}" ]; then "${{ steps.vars.outputs.STRIP }}" "${DPKG_DIR}/usr/bin/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}" ; fi
            # README and LICENSE
            (shopt -s nullglob; for f in [R]"EADME"{,.*}; do install -Dm644 "$f" "${DPKG_DIR}/usr/share/doc/${{ env.PROJECT_NAME }}/$f" ; done)
            (shopt -s nullglob; for f in [L]"ICENSE"{-*,}{,.*}; do install -Dm644 "$f" "${DPKG_DIR}/usr/share/doc/${{ env.PROJECT_NAME }}/$f" ; done)
            # control file
            mkdir -p "${DPKG_DIR}/DEBIAN"
            printf "Package: ${{ steps.vars.outputs.DPKG_BASENAME }}\nVersion: ${{ steps.vars.outputs.DPKG_VERSION }}\nSection: utils\nPriority: optional\nMaintainer: ${{ env.PROJECT_AUTH }}\nArchitecture: ${{ steps.vars.outputs.DPKG_ARCH }}\nProvides: ${{ env.PROJECT_NAME }}\nConflicts: ${{ steps.vars.outputs.DPKG_CONFLICTS }}\nDescription: ${{ env.PROJECT_DESC }}\n" > "${DPKG_DIR}/DEBIAN/control"
            # build dpkg
            fakeroot dpkg-deb --build "${DPKG_DIR}" "${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.DPKG_NAME }}"
          fi
      - name: Publish
        uses: softprops/action-gh-release@v2
        if: steps.vars.outputs.DEPLOY
        with:
          files: |
            ${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_NAME }}
            ${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.DPKG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
